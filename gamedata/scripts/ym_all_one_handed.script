--#region debug


local function dbg_print(msg, ...)
    if not ym_debug then return end
    

    ym_debug.set_modname("all one handed")
    ym_debug.dbg_print(msg,...)
end

local function dbg_dump(o)
    if not ym_debug then return end

    return ym_debug.dbg_dump(o)
end

local function newline()
    if not ym_debug then return end
    ym_debug.dbg_newline()
end
--#endregion


--#region Variables
    --#region Imports

if not grok_bo_enhanced_recoil or not grok_bo_enhanced_recoil.modifier then
    printf("!Enhanced Recoil Gold is not installed. Stopping Mod")
    return
end

local idp            = round_idp
local org_get_recoil = grok_bo_enhanced_recoil.get_weapon_recoil_gold
local add_modifier = grok_bo_enhanced_recoil.add_modifier
local remove_modifier = grok_bo_enhanced_recoil.remove_modifier
local modifier = grok_bo_enhanced_recoil.modifier
local ini = ini_file("ym_one_handed_wpns.ltx")
    --#endregion

device_sec_blacklist = {}
device_sec_whitelist = {}
device_kind_blacklist = {}
device_kind_whitelist = {}

wpn_sec_blacklist = {}
wpn_sec_whitelist = {}
wpn_kind_blacklist = {}
wpn_kind_whitelist = {}

--[[ 
    mod_func is a simple function to add to Enhanced Recoil Gold, modding the recoil of ALL weapons, doesn't 
    matter which is out
--]]

-- MCM options
local RECOIL_DEBUFF = true
local ALLOW_HIPFIRE = true
local ALLOW_ZOOM = true
-- the higher the number, the higher the recoil is affected
-- At 7, the recoil pattern path length is about doubled, for me
local RECOIL_DEBUFF_INT = 7 


local mod_func_hipfire        = function(effect_power, wpn, wpn_fx)
    dbg_print("mod func hipfire running")
    return effect_power * RECOIL_DEBUFF_INT
end

local mod_func_ads        = function(effect_power, wpn, wpn_fx)
    dbg_print("mod func ads running")
    return effect_power * 3
end


-- State variables
local is_zoomed = false -- player is ADS-ing
local is_raised = false -- weapon is raised (secondary position, unable to fire)
local detector_out = false -- detector is out, 'nuff said; well, the appropiate device is out, one on a blacklist in the ini
local wpn_out = 4 
local raiseWpn = false
local IsModded = false
local modWpn = false
--#endregion



local function load_settings()
    newline()
    dbg_print("load_settings")
    device_kind_whitelist = {}
    device_kind_blacklist = {}
    device_sec_blacklist = {}
    device_sec_whitelist = {}

    wpn_kind_whitelist = {}
    wpn_kind_blacklist = {}
    wpn_sec_blacklist = {}
    wpn_sec_whitelist = {}


	-- local detector = db.actor:active_detector()
    -- local section = detector:section()
    -- local kind = ini_sys:r_string_ex(section,"kind") or "unknown"
	-- local wep = db.actor:active_item()

    -- detector_out = kind == "i_device" and not wep and db.actor:active_detector()
    -- detector_out = db.actor and db.actor:active_detector() or false
    -- dbg_print("detector_out = %s", detector_out)


    --#region Device lists
    -- Section 
    local n = ini:line_count("device_sec_blacklist")
    for i = 0, n-1 do
        local result, sec = ini:r_line_ex("device_sec_blacklist")
        if sec then
            device_sec_blacklist[sec] = true
        end
    end

    n = ini:line_count("device_sec_whitelist")
    for i = 0, n-1 do
        local result, sec = ini:r_line_ex("device_sec_whitelist")
        if sec then
            device_sec_whitelist[sec] = true
        end
    end

    -- Kind
    n = ini:line_count("device_kind_blacklist")
    for i = 0, n-1 do
        local result, kind = ini:r_line_ex("device_kind_blacklist")
        dbg_print("device_kind = %s", kind)
        if kind then
            device_kind_blacklist[kind] = true
        end
    end

    n = ini:line_count("device_kind_whitelist")
    for i = 0, n-1 do
        local result, kind = ini:r_line_ex("device_kind_whitelist")
        if kind then
            device_kind_whitelist[kind] = true
        end
    end
    --#endregion

    --#region Weapon lists
    -- Section 
    local n = ini:line_count("wpn_sec_blacklist")
    for i = 0, n-1 do
        local result, sec, i = ini:r_line_ex("wpn_sec_blacklist",i, "", "")
        if sec then
            i = i or 3
            wpn_sec_blacklist[sec] = i 
        end
    end

    n = ini:line_count("wpn_sec_whitelist")
    for i = 0, n-1 do
        local result, sec = ini:r_line_ex("wpn_sec_whitelist")
        if sec then
            wpn_sec_whitelist[sec] = true
        end
    end

    -- Kind
    n = ini:line_count("wpn_kind_blacklist")
    for i = 0, n-1 do
        local result, kind, i = ini:r_line_ex("wpn_kind_blacklist",i, "", "")
        dbg_print("wpn_kind = %s", kind)
        if kind then
            i = i or 3 -- default to allow hipfire and ADS but with recoil debuff
            wpn_kind_blacklist[kind] = i 
        end
    end

    n = ini:line_count("wpn_kind_whitelist")
    for i = 0, n-1 do
        local result, kind = ini:r_line_ex("wpn_kind_whitelist")
        if kind then
            wpn_kind_whitelist[kind] = true
        end
    end
    


    --#endregion
end



local function save_state(mdata) 
    mdata.detector_out = detector_out
    mdata.wpn_out = wpn_out
    mdata.raiseWpn = raiseWpn
    mdata.IsModded = IsModded
    mdata.modWpn = modWpn
    mdata.is_raised = is_raised
end

local function load_state(mdata) 
    detector_out = mdata.detector_out or false
    wpn_out = mdata.wpn_out or 4
    raiseWpn = mdata.raiseWpn or false
    IsModded = mdata.IsModded or false
    modWpn = mdata.modWpn or false
    is_raised = mdata.is_raised or false
    load_settings()
end



local function actor_on_first_update()
    load_settings()
    -- dbg_print("key_bindings = %s", dbg_dump(key_bindings))
end

local function on_option_change()
    load_settings()
end


-- TODO: disable hipfire but allow aiming with device
-- TODO: mcm for many options
-- FIX: weapon is out, taking detector out does not raise wpn
-- TODO: per device config

function on_detector_start(anm_table, item)
	if not item then return end
    newline()
    dbg_print("on_detector_start")


    device_kind_blacklist = device_kind_blacklist
    device_kind_whitelist = device_kind_whitelist
    device_sec_blacklist = device_sec_blacklist
    device_sec_whitelist = device_sec_whitelist

    wpn_kind_blacklist = wpn_kind_blacklist
    wpn_kind_whitelist = wpn_kind_whitelist
    wpn_sec_blacklist = wpn_sec_blacklist
    wpn_sec_whitelist = wpn_sec_whitelist

    local anm_name = anm_table.anm_name -- Only care about "anm_hide.*" or "anm_show.*"

    -- every animation update, keep the wpn lowered
    -- if ((not string.find(anm_name, "^anm_show")) or (not string.find(anm_name, "^anm_hide"))) then
    --     if raiseWpn then game.actor_lower_weapon(raiseWpn) end
    --     return
    -- end

    local section = item:section() -- section here is the weapon/detector
    local kind = ini_sys:r_string_ex(section,"kind") or "unknown" -- "kind" is usually "i_device"
    local isHide = string.find(anm_name, "^anm_hide") and true or false
    local isShow = not isHide or false

	local wpn = db.actor:active_item()
    local wpn_sec = nil
    local wpn_kind = nil

    dbg_print("wpn = %s", wpn and wpn:section() or false)
    if not IsWeapon(wpn) then wpn = nil end
    if wpn then
        wpn_sec = wpn:section()
        wpn_kind = ini_sys:r_string_ex(wpn_sec,"kind") or nil
    end


    if isShow then
        if ((kind == "i_device"))then 
            detector_out = true
        end

        if detector_out then 
            if ((wpn_kind and wpn_kind_blacklist[wpn_kind]) or (wpn_sec and wpn_sec_blacklist[wpn_sec])) then
                if wpn_sec_blacklist[wpn_sec] then
                    wpn_out = tonumber(wpn_sec_blacklist[wpn_sec]) or 4
                else    
                    wpn_out = tonumber(wpn_kind_blacklist[wpn_kind]) or 4
                end
            end

            if (wpn_sec_whitelist[wpn_kind] or wpn_sec_whitelist[wpn_sec]) then
                wpn_out = 4
            end
        end


        -- if recoil debuff is disabled
        if not RECOIL_DEBUFF then
            -- no hipfire, ADS with recoil debuff
            if (wpn_out == 2 ) then
                wpn_out = 1 -- set to no hipfire, normal ADS
            -- hipfire and ADS with recoil debuff
            elseif (wpn_out == 3) then
                wpn_out = 4 -- hipfire and ADS, no recoil debuff at all
            end
         end
    end



    -- Either weapon or device hides
    -- Reset
    if isHide then
        wpn_out = 4
        detector_out = false
        modWpn = false
        remove_modifier(mod_func_hipfire)
        IsModded = false
        game.actor_lower_weapon(false)
        return
    end

    dbg_print("detector_out = %s", detector_out)
    dbg_print("wpn_out = %s", wpn_out)

    -- Add recoil mod
    if (( (wpn_out == 2) or (wpn_out == 3)) and RECOIL_DEBUFF) then
        modWpn = true
        if not IsModded then
            add_modifier(mod_func_hipfire)
            IsModded = true
        end
    end

    -- State variable that weapon is force-raised
    if (wpn_out < 3 and detector_out and (not is_zoomed)) then 
        raiseWpn = true
    else
        raiseWpn = false
    end

    dbg_print("raiseWpn = %s", raiseWpn)

    -- ::raise::
    game.actor_lower_weapon(raiseWpn)
end



local function actor_on_weapon_raise(wpn)
    if not wpn then return end
    newline()
    dbg_print("actor_on_weapon_raise, wpn = %s", wpn)
    is_raised = true
    -- if detector_out and not about_to_zoom then return end
    -- if raiseWpn then game.actor_lower_weapon(raiseWpn) end
end

local function actor_on_weapon_lower(wpn)
    if not wpn then return end
    newline()
    dbg_print("actor_on_weapon_lower, wpn = %s", wpn)
    is_raised = false
end

-- TODO: do quick put away for device on ADS
-- TODO: quick put away device if weapon is out in general
local function on_before_key_press(key, bind, dis, flags)
    -- dbg_print("flags = %s", dbg_dump(flags))
    -- dbg_print("kWPN_FIRE = %s, kWPN_ZOOM = %s", key_bindings.kWPN_FIRE, key_bindings.kWPN_ZOOM)
    -- dbg_print("bind == kWPN_FIRE = %s, bind == kWPN_ZOOM = %s", bind == key_bindings.kWPN_FIRE, bind == key_bindings.kWPN_ZOOM) 

    -- If device is not even out, or hipfire is allowed, then stop 
    if (not detector_out)  then return end

    -- Device IS out AND hipfire is DISALLOWED
    if ((bind == key_bindings.kWPN_FIRE) or (bind == key_bindings.kWPN_ZOOM)) then
        newline()
        dbg_print("on_before_key_press")
        dbg_print("detector_out = %s", detector_out)

        -- -- Basically, gun gets to act normally, aim and shoot or whatever
        -- if (ALLOW_HIPFIRE and wpn_out >= 3) then return end
    end

    -- Prevent shooting 
    if (bind == key_bindings.kWPN_FIRE) then
        dbg_print("is_zoomed = %s, ALLOW_HIPFIRE = %s, is_raised = %s", is_zoomed, ALLOW_HIPFIRE, is_raised)
        if is_zoomed then return end -- if already ADS-ed
        -- if ALLOW_HIPFIRE then return end -- if hipfire is enabled 
        if not is_raised then return end -- if hipfire is enabled and allowed, basically
        dbg_print("fire")

        -- weapon is raised and hipfire is disabled and you are not aiming down sights
        -- prevent shooting
        if ((not ALLOW_HIPFIRE) or (wpn_out < 3)) then
            flags.ret_value = false
        end
    -- Prevent aiming down sights
    elseif (bind == key_bindings.kWPN_ZOOM) then
        dbg_print("zoom")
        -- Set flag stating player is ADS-ing currently
        if (ALLOW_ZOOM and (wpn_out > 0)) then
            is_zoomed = true
        -- Prevent ADS-ing
        else
            flags.ret_value = false
        end
        dbg_print("about_to_zoom = %s", is_zoomed)
    end
    
end

local function on_key_press(key)
    newline()
    -- dbg_print("on_key_press")
	local bind = dik_to_bind(key)

    -- dbg_print("key = %s", key)
    -- dbg_print("bind = %s", bind)
end

-- When player stops ADS-ing, unset flag
local function on_key_release(key)
    newline()
    -- dbg_print("on_key_release")

	local bind = dik_to_bind(key)
    -- dbg_print("bind = %s", bind)

    if (bind == key_bindings.kWPN_ZOOM) then 
        is_zoomed = false
        dbg_print("about_to_zoom = %s", is_zoomed)
    end
end

-- local function actor_on_weapon_before_fire(flags)
--     dbg_print("actor_on_weapon_before_fire")
--    if detector_out then return end 
-- end

-- When something is equipped to/from device slot, reset weapon state (raised)
local function actor_item_to_slot(obj)
    dbg_print("actor_item_to_slot")

    -- check if obj moved to/from device slot 
    if not IsItem("device", nil, obj) then return end

	detector_out = false
    wpn_out = 4
    remove_modifier(mod_func_hipfire)
    IsModded = false
    game.actor_lower_weapon(false)
end


local function actor_on_weapon_zoom_in()
    if (IsModded and ((wpn_out == 3) or (wpn_out == 2)))  then
        remove_modifier(mod_func_hipfire)
        add_modifier(mod_func_ads)
    end
end

local function actor_on_weapon_zoom_out()
    if (IsModded and ((wpn_out == 3) or (wpn_out == 2)))  then
        remove_modifier(mod_func_ads)
        add_modifier(mod_func_hipfire)
    end
end


function on_game_start()
    RegisterScriptCallback("save_state",save_state)
    RegisterScriptCallback("load_state",load_state)
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
    -- RegisterScriptCallback("actor_on_hud_animation_end", on_detector_end)
	-- RegisterScriptCallback("actor_on_weapon_before_fire", actor_on_weapon_before_fire)
	RegisterScriptCallback("actor_on_weapon_raise",actor_on_weapon_raise)
	RegisterScriptCallback("actor_on_weapon_lower",actor_on_weapon_lower)
    RegisterScriptCallback("actor_on_hud_animation_play", on_detector_start)
    RegisterScriptCallback("on_key_press", on_key_press)
    RegisterScriptCallback("on_key_release", on_key_release)
    -- RegisterScriptCallback("on_key_hold", on_key_hold)
    RegisterScriptCallback("actor_on_weapon_zoom_in", actor_on_weapon_zoom_in)
    RegisterScriptCallback("actor_on_weapon_zoom_out", actor_on_weapon_zoom_out)
    RegisterScriptCallback("on_before_key_press", on_before_key_press)
    RegisterScriptCallback("actor_item_to_slot", actor_item_to_slot)
    RegisterScriptCallback("on_option_change", on_option_change)
end
